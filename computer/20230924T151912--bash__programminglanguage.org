#+title:      bash
#+date:       [2023-09-24 Sun 15:19]
#+filetags:   :programminglanguage:
#+identifier: 20230924T151912

link for tutorial [[https://linuxconfig.org/bash-scripting-tutorial-for-beginners][linux config link]]

* Bash
Command Language interpreter . Short for Bourne-again shell Shell is a
macro processor which allows for an interactive or non interactive
command execution. Bash is default interpreter on many GNU/linux
system example of some command : date, cal , pwd , cd
To see the default interpreter in system type $SHELL and press return

* Scripting
1. create a file with name task.sh containing commands in seperate line
for example
#+begin_src bash
  pwd
  whoami
  date
#+end_src

#+RESULTS:
| /home/niraj/notes/computer |
| niraj                      |

make this file executable with chmod +x and run with ./task.sh
2. It  is good practice to define shell interpreter to be used
   explicitly to interpret the script content .
   shebang #!
   command : which [gives full path to executable binary]
   example
   #+begin_src bash
     #! /usr/bin/zsh
     # write code here
     # that are to be executed with /usr/bin/bash
     current_shell=$SHELL
     echo $current_shell
   #+end_src

   #+RESULTS:
   : /usr/bin/zsh

   Regardless of script complexity donot attempt to write your entire
   script in one go. slowly develop your script by testing each line
   by executing it first on terminal command line. when sucessfull
   transfer it to shell script

* Commands options vs arguments  
| commands options                 | command arguments                           |
|----------------------------------+---------------------------------------------|
| used to modify command behaviour | may specify command execution target        |
| prefixed by -                    | such as file, directory , text and more ... |
| example:                         | example :                                   |
| ls -l                            | ls -l hello_world.sh                        |
|----------------------------------+---------------------------------------------|

example interpretation of ls -l hello_world.sh
+ command :: ls
+ options :: -l
+ arguments :: hello_world.sh

* Variables
illustrations through examples
#+begin_src bash
  #! usr/bin/zsh

  # illustration of variable
  greetings="welcome" #greetings is name of variable which stores strings "welcome"
  user=$(whoami) #whoami is a command and its output is stored in variable user
  # no blank spaces are allowed 

  echo "$greetings back $user !" #the value of variable are acessed by $variablename
#+end_src

#+RESULTS:
: welcome back niraj !

- Command output can be stored in a variable using $(command) as
  illustrated below :
  varibleName=$(someCommand)
  example:
  user=$(whoami)

- the command value can be directly used  without storing in a
  variable and  can be acessed directly as shown below
  #+begin_src bash
    echo "$(whoami)"
  #+end_src 

  #+RESULTS:
  : niraj

- uppercase variable name are reserved for internal shell variables.
  $SHELL is variable which stores default shell 

  
