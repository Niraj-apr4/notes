#+title:      orgmode
#+date:       [2023-08-05 Sat 12:50]
#+filetags:   :programminglanguage:
#+identifier: 20230805T125013

#+title:      Org-tutorial
#+date:       [2023-08-05 Sat 12:50]
#+filetags:   :programminglanguage:
#+identifier: 20230805T125013

* Getting started with orgmode [[https://orgmode.org/quickstart.html][link]]                                

* Org compact guide [[https://orgmode.org/guide/index.html][link]] 
** DONE Markup for Rich Contents 
** DONE Tables
** TODO Hyperlinks

* WAITING Org Mode at the begining of emacs [[https://orgmode.org/worg/org-tutorials/org4beginners.html][link]]
** working with TODO items
1. [ ] Basic todo functionality
2. [ ] configuring TODOs
** Agendas 
** Tags
- [x] To add tags, add the following to the top your document:

  #+begin_example
  #+TAGS: { @OFFICE(o) @HOME(h) } COMPUTER(c) PHONE(p) READING(r)
  #+end_example
  The first two tags (OFFICE and HOME) are mutually exclusive, the rest can just be added.

- [x] Adding tags to emacs config file  

  #+begin_src emacs-lisp
  (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))
  #+end_src
 
* Org Mode beginners customizations Guide [[https://orgmode.org/worg/org-configs/org-customization-guide.html][link]]
** The Basics
*** DONE Minimal Customization 

  set key bindings for
  - org-store-link
  - org-agenda
  - org-capture
        #+begin_src emacs-lisp
          (global-set-key (kbd "C-c l") #'org-store-link)
          (global-set-key (kbd "C-c a") #'org-agenda)
          (global-set-key (kbd "C-c c") #'org-capture)
        #+end_src
  refrence : steps described in manual to activate [[https://orgmode.org/manual/Activation.html#Activation][link]]

*** WAITING Five small step towards personalized system 
  1.[x] More todo keywords
     + Define todo states you find usefull and single letters for fast selection .
       customize variable =org-todo-keywords= or simple do this right in file with 
            #+begin_example
            #+TODO: TODO(t) STARTED(s) WAITING(w) | DONE(d) CANCELED(c)
            #+end_example
     + [x] in init.el file 
       The vertical bar separates the TODO keywords (states that need action) from the
       DONE states (which need no further action). If you do not provide the separator bar,
       the last state is used as the DONE state.

            #+begin_src emacs-lisp
            (setq org-todo-keywords
            '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
            #+end_src

        refrence : manual  [[https://orgmode.org/manual/Workflow-states.html][workflow states]] , also see relevant page on manual [[https://orgmode.org/guide/Multi_002dstate-Workflow.html][multi-state workflow]]
        
     + [-] If you are using more than two different states, you might want to use special faces for some of them.
     This can be done using the variable =org-todo-keyword-faces=. for example

            #+begin_src emacs-lisp
            (setq org-todo-keyword-faces
                    '(("TODO" . org-warning) ("STARTED" . "yellow")
                    ("CANCELED" . (:foreground "blue" :weight bold))))
            #+end_src
         
  2. [ ] Tags
     see manual [[https://orgmode.org/org.html#Tags][tags]]
     + use cases :: File-tags
     You can also set tags that all entries in a file should inherit just as if these tags were defined
     in a hypothetical level zero that surrounds the entire file.
  3. [ ] relevants file for Agenda

     C-c a |org-Agenda  
     C-c [ | add file to agenda list
     C-c ] | remove file from agenda list

  4. [ ] find what you need to see now :: custom agenda commands 
  5. [ ] Capture Idea with predefinded templates
     see org-capture 

* TODO Features,customization planned/Problem to be fixed
- [ ] How org files should display on startup regarding fold/unfold
- [ ] Install org-auctex preview which uses auctex library for fast
  preview and make suitable keybinding to it 
- [X] Improve workflow states according to habits.
- [ ] folding across list 
- [ ] checklists in [[* Markup for Rich contents]]
- [ ] some math symbol donot render and are displayed as rectangle .
- [ ] latex preview breaks alignment of table
- [ ] Feature to toggle spell check when desired 


* combined notes 
** Markup for Rich contents
- [ ] write key bindings for this section
  | key       | Purpose |
  |-----------+---------|
  | fill here | ....    |


1. Paragraph
   Paragraphs are seperated by at least one empty line 
   If you would like to center some text, do it like this:

   #+BEGIN_CENTER
   Everything should be made as simple as possible, \\
   but not any simpler
   #+END_CENTER

2. Emphasis and monospace  
   You can make words ‘*bold*’, ‘/italic/’, ‘_underlined_’, ‘=verbatim=’ and ‘~code~’, and, if you must, ‘+strike-through+’.

3. Embedded Latex
   directly use TeX-like syntax

4. Literal Example
   is not subjected to markup . such are typespaced in monospace
   - examples :: block
     #+begin_example
     some example from text file . it is not subjected to markup 
     #+end_example

   - examples :: simple in line
     here is an example
     : some example from text file

   - Source code for programming Language
     #+begin_src emacs-lisp
     (defun org-xor (a b)
        "Exclusive or."
        (if a (not b) b))
     #+end_src 
    To edit the example in a special buffer supporting this language,
    use C-c ' to both enter and leave the editing buffer.
    - [ ] Fast and efficent insertion of above environments

5. Footnotes
   - [ ] ergonomic key bindings for footnotes .
   footnotes are defined in the paragraph. They appear at the bottom of
   the page they are defined .while refrence appear with in the text for example

   notes taken from [fn:1] for furthur detailed information see [fn:2]

** Table
- key bindings used 
    | keys       | Purpose                        |
    |------------+--------------------------------|
    | Ctrl-c RET | to insert horizental seperator |
    | TAB/RET    | use and observe yourself       |
    |------------+--------------------------------|

Any line with ‘|’ as the first non-whitespace character is considered part of a table.
‘|’ is also the column separator.
#+begin_example
|Name|Phone|Age|
#+end_example
see [fn:3] org compact guide for more information

* Footnotes

[fn:3] Org compact guide [[https://orgmode.org/guide/Tables.html][link to Table]] 
[fn:2] Org manual [[ https://orgmode.org/manual/Markup-for-Rich-Contents.html][link to markup for rich documents]]
[fn:1] org compact guide [[https://orgmode.org/guide/Markup.html][link to markup for rich documents]]
